{
	function create_rule(needed, given) {
		return {needed, given};
	};

	function create_expression(value, type, left, right) {
		if (value)
			return {type: 'VALUE', value};
		return {type, left, right};
	};

	function create_not(value) {
		return {type: 'NOT', value}
	}
}

start
	= rules+ ;

rules
	= _ws_ needed:expression _ws_ '=>' _ws_ given:expression _ws_ _nl_ {return create_rule(needed, given)} ;

expression
	= value:xor {return value}
	/ value:and {return value}
	/ value:or {return value}
	/ evaluation ;

xor
	= left:evaluation _ws_ '^' _ws_ right:expression {return create_expression(null, 'XOR', left, right)} ;
and
	= left:evaluation _ws_ '+' _ws_ right:expression {return create_expression(null, 'ADD', left, right)} ;
or
	= left:evaluation _ws_ '|' _ws_ right:expression {return create_expression(null, 'OR', left, right)} ;

evaluation
	= 'u' 
	/ '!(' _ws_ value:expression _ws_ ')' {return create_not(value)}
	/ '(' _ws_ value:expression _ws_ ')' {return value}
	/ value:symbole {return create_expression(value)} 
	/ '!' value:symbole {return create_not(create_expression(value))} ;

symbole
	= [A-Z] ;

_ws_
	= (' ' / '\t')* ;

_nl_
	= ('\n')+ ;