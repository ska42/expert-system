{
	const to_ob = (rules, initial_facts, queries) => ({rules, initial_facts, queries});
	const to_rl = (needed, given) => ({needed, given});
	const to_ex = (value, type, left, right) => value ? {type: 'v', value} : {type, left, right};
	const to_nt = (value) => ({type: '!', value});
}

start = _sk_* r:rules+ i:initial_facts q:queries {return to_ob(r, i, q)} ;

rules = _ws_* n:l_exp _ws_* '=>' _ws_* g:r_exp _sk_+ {return to_rl(n, g)} ;
initial_facts = _ws_* '=' f:fact* _sk_+ {return f} ;
queries = _ws_* '?' q:fact* _sk_* _se_ {return q} ;

l_exp = l_xor / l_or / l_and / l_eval ;		// left  expression
r_exp = r_and / r_eval ;					// right expression

l_xor = l:(l_or / l_and / l_eval) _ws_* '^' _ws_* r:(l_exp) {return to_ex(null, '^', l, r)} ;			// left  expression
l_or = l:(l_and / l_eval) _ws_* '|' _ws_* r:(l_and / l_or / l_eval) {return to_ex(null, '|', l, r)} ;	// left  expression
l_and = l:(l_eval) _ws_* '+' _ws_* r:(l_and / l_eval) {return to_ex(null, '+', l, r)} ;					// left  expression
r_and = l:(r_eval) _ws_* '+' _ws_* r:(r_and / r_eval) {return to_ex(null, '+', l, r)} ;					// right expression

l_eval																				// left expression
	= '!(' _ws_* '!(' _ws_* v:l_exp _ws_* ')' _ws_* ')' {return to_ex(v)}				// !(!(x))
	/ '!(' _ws_* v:l_exp _ws_* ')' {return to_nt(v)}									// !(x)
	/ '!' v:fact {return to_nt(to_ex(v))}												// !x
	/ '(' _ws_* '(' _ws_* '(' _ws_* v:l_exp _ws_* ')' _ws_* ')' _ws_* ')' {return v}	// (((x)))
	/ '(' _ws_* '(' _ws_* v:l_exp _ws_* ')' _ws_* ')' {return v}						// ((x))
	/ '(' _ws_* v:l_exp _ws_* ')' {return v}											// (x)
	/ v:fact {return to_ex(v)} ;														// f

r_eval																				// right expression
	= '!(' _ws_* '!(' _ws_* v:r_exp _ws_* ')' _ws_* ')' {return to_ex(v)}				// !(!(x))
	/ '!(' _ws_* v:r_exp _ws_* ')' {return to_nt(v)}									// !(x)
	/ '!' v:fact {return to_nt(to_ex(v))}												// !x
	/ '(' _ws_* '(' _ws_* '(' _ws_* v:r_exp _ws_* ')' _ws_* ')' _ws_* ')' {return v}	// (((x)))
	/ '(' _ws_* '(' _ws_* v:r_exp _ws_* ')' _ws_* ')' {return v}						// ((x))
	/ '(' _ws_* v:r_exp _ws_* ')' {return v}											// (x)
	/ v:fact {return to_ex(v)} ;														// f

fact = [A-Z] ;

_sk_ = _se_ _nl_ ;			// skip
_se_ = _ws_* _cm_* ;		// skip end_line
_ws_ = (' ' / '\t') ;		// white_space
_cm_ = ('#' [^\n]*) ;		// comments
_nl_ = ('\n')+ ;			// new_line